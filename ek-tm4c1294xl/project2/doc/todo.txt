проверять возвращаемые значения, особенно MEM
udp_remove & pbuf_free
udp HELLO send IP
tcp port in use
serial test overflow
serial4 ((dwStatus & 0x00000020) != 0) || (dwStatus == 0);
TCP_WRITE_FLAG_COPY
 
    IntDefaultHandler,                      // Fan 1
    0,                                      // Reserved

rtsv7M4_T_le_eabi.lib vs rtsv7M4_T_le_eabi.lib

InitSettings check result
SaveSettings check result 
tcp_nagle_disable
#define LWIP_PLATFORM_DIAG(msg)
ASSERT

// Free up the pbuf.  Note that we don't acknowledge receipt of the data since we want it to be retransmitted later.
// If we already have a connection, kill it and start over.
// Process the RX ring buffer data if space is available in the TCP output buffer.

http://lwip.wikia.com/wiki/Raw/TCP

как принимать TCP: sw01266.zip -> TelnetReceive
for(q = p, pucData = q->payload; q != NULL; q = q->next)
 
как передавать TCP: ser2enet -> TelnetHandler
        if(SerialReceiveAvailable(pState->ulSerialPort) &&
          tcp_sndbuf(pState->pConnectPCB) &&
          (pState->pConnectPCB->snd_queuelen < TCP_SND_QUEUELEN))
        {
                
SERIAL_FLOW_CONTROL_HW           

pState->eLastErr = err;
pState->eLastErr = eError;     

http://docs.tibbo.com/soism/index.html?bcast_out_of_band.htm
http://docs.tibbo.com/soism/index.html?s_e_routing.htm
http://docs.tibbo.com/soism/index.html?setting_rm.htm
http://docs.tibbo.com/soism/index.html?application_notes.htm
http://docs.tibbo.com/soism/index.html?an009.htm
http://docs.tibbo.com/soism/index.html?an010.htm
http://docs.tibbo.com/soism/index.html?an003.htm

hidded MAC programming {ds1.0} http://docs.tibbo.com/soism/index.html?an009.htm

TelnetWriteDiagInfo

^.*//\r\n

валидация ibBaud,ibRoutingMode

usTelnetLocalPort in client mode

watchdog

UDP debug


Nu8_t ram_heap[MEM_SIZE_ALIGNED + (2*SIZEOF_STRUCT_MEM) + MEM_ALIGNMENT];
Xu8_t ram_heap[((((64 * 1024)) + 4 - 1) & ~(4-1)) + (2*(((sizeof(struct mem)) + 4 - 1) & ~(4-1))) + 4];

N  mem->next = MEM_SIZE_ALIGNED;
X  mem->next = ((((64 * 1024)) + 4 - 1) & ~(4-1));

N#define LWIP_MEM_ALIGN_SIZE(size) (((size) + MEM_ALIGNMENT - 1) & ~(MEM_ALIGNMENT-1))

N#define MEM_SIZE                          (64 * 1024)


Define MEM_STATS and look at the memory statistics via stats_display_mem. See stats.h, stats.c, and opt.h among other places. That should get you started.

http://lwip.wikia.com/wiki/Lwipopts.h
